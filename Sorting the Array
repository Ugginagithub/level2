/*Sorting the Array
Program Description :
Being a programmer, you like arrays a lot. For your birthday, your friends have given you an array a consisting of n distinct integers.

Unfortunately, the size of a is too small. You want a bigger array! Your friends agree to give you a bigger array, but only if you are able to answer the following question correctly: is it possible to sort the array a (in increasing order) by reversing exactly one segment of a? See definitions of segment and reversing in the notes. 

Input Format :
The first line of the input contains an integer n — the size of array a.

The second line contains n distinct space-separated integers: a[1], a[2], ..., a[n] 

Output Format :
Print "yes" or "no" (without quotes), depending on the answer.

If your answer is "yes", then also print two space-separated integers denoting start and end (start must not be greater than end) indices of the segment to be reversed. If everything is in sorted order print the 1 1. 

Input :
3
3 2 1 


Output :
yes
1 3 


Constraints :
 ≤ n ≤ 105

≤ a[i] ≤ 109 */


#include <iostream>
#include <vector>
#include <algorithm> // Include the <algorithm> header
using namespace std;

int main() {
    int n;
    cin >> n; // Read the size of array a

    vector<int> a(n);
    for (int i = 0; i < n; ++i) {
        cin >> a[i]; // Read the array elements
    }

    int start = -1, end = -1; // Initialize the start and end indices for the segment to be reversed

    // Find the first element that is not in increasing order
    for (int i = 1; i < n; ++i) {
        if (a[i] < a[i - 1]) {
            start = i - 1;
            break;
        }
    }

    // Find the last element that is not in increasing order
    for (int i = n - 1; i > 0; --i) {
        if (a[i] < a[i - 1]) {
            end = i;
            break;
        }
    }

    // Reverse the potential segment
    if (start != -1 && end != -1) {
        reverse(a.begin() + start, a.begin() + end + 1);

        // Check if the array is sorted after reversing the segment
        bool sorted = true;
        for (int i = 1; i < n; ++i) {
            if (a[i] < a[i - 1]) {
                sorted = false;
                break;
            }
        }

        if (sorted) {
            cout << "yes" << endl;
            cout << start + 1 << " " << end + 1 << endl;
        } else {
            cout << "no" << endl;
        }
    } else {
        // The array is already sorted
        cout << "yes" << endl;
        cout << "1 1" << endl;
    }

    return 0;
}
