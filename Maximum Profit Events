/*Maximum Profit Events
Program Description :
Given a list events of n intervals, the ith element [s, e, p] denotes the starting point s, ending point e, and the profit p earned by choosing the ith event. Find the maximum profit one can achieve by choosing a subset of non-overlapping events.

Two events [s1, e1, p1] and [s2, e2, p2] are said to be non-overlapping if [e1 <= s2] and [s1 < s2]. 

Input Format :
First line denotes a single integer n representing the number of events.

The n subsequent lines contains three space separated integers s, e, p of an event respectively.

Output Format :
A single integer representing the maximum profit earned by choosing a subset of events.

Input :
3

1 2 4

1 5 7

2 4 4


Output :
8

Explanation:

By choosing the events [1, 2, 4] and [2, 4, 4], we can get a maximum profit of 8 as they are non-overlapping.


Constraints :
1 <= n <= 10^5

1 <= s < e <= 10^5

1 <= p <= 10^5*/



#include<bits/stdc++.h>
using namespace std;
bool comp(vector<int>&a,vector<int>&b){
    if(a[0]==b[0] && a[1]==b[1]) return a[2]>b[2];
    else if(a[0]==b[0]) return a[1]<b[1];
    else if(a[1]==b[1]) return a[0]<b[0];
    else return a[0]<=b[0];
}
int main(){
    int n;
    cin>>n;
    vector<vector<int>> arr(n,vector<int>(3));
    for(int i=0;i<n;i++){
        cin>>arr[i][0]>>arr[i][1]>>arr[i][2];
    }
    sort(arr.begin(),arr.end(),comp);
    vector<int>v(n,0);
    for(int i=0;i<n;i++) v[i]=arr[i][2];
    for(int i=0;i<n;i++){
        for(int j=0;j<i;j++){
            if(arr[j][0]<arr[i][0] && arr[j][1]<=arr[i][0]){
                v[i]=max(v[i],arr[i][2]+v[j]);
            }
        }
    }
    int maxi=0;
    for(int i=0;i<n;i++){
        maxi=max(maxi,v[i]); 
    }
    cout<<maxi;
}
