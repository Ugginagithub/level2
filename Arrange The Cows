/*Program Description :
You are given an array consisting of n integers which denote the position of a stall. You are also given an integer k which denotes the number of aggressive cows. You are given the task of assigning stalls to k cows such that the minimum distance between any two of them is the maximum possible. 

Your Task:
Complete the function int solve(), which takes integer n, k, and a vector stalls with n integers as input and returns the largest possible minimum distance between cows. 

Input Format :
The first line of input contains two space-separated integers n and k.
The second line contains n space-separated integers denoting the position of the stalls. 

Output Format :
Single line integer output

Input :
5 3
1 2 4 8 9 


Output :
3


Constraints :
2 <= n <= 10^5
2 <= k <= n
0 <= stalls[i] <= 10^9 */

#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

bool canPlaceCows(vector<int>& stalls, int n, int k, int minDist) {
    int cowsPlaced = 1;
    int prevStall = stalls[0];

    for (int i = 1; i < n; i++) {
        if (stalls[i] - prevStall >= minDist) {
            cowsPlaced++;
            prevStall = stalls[i];
        }
    }

    return cowsPlaced >= k;
}

int solve(int n, int k, vector<int>& stalls) {
    sort(stalls.begin(), stalls.end());

    int left = 0;
    int right = stalls[n - 1] - stalls[0];
    int result = -1;

    while (left <= right) {
        int mid = left + (right - left) / 2;

        if (canPlaceCows(stalls, n, k, mid)) {
            result = mid;
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }

    return result;
}

int main() {
    int n, k;
    cin >> n >> k;
    vector<int> stalls(n);

    for (int i = 0; i < n; i++) {
        cin >> stalls[i];
    }

    int answer = solve(n, k, stalls);
    cout << answer << endl;

    return 0;
}
