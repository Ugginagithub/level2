/*Owner
Program Description :
 There is a bookstore owner that has a store open for n minutes. Every minute, some number of customers enter the store. You are given an integer array customers of length n where customers[i] is the number of the customer that enters the store at the start of the ith minute and all those customers leave after the end of that minute.

On some minutes, the bookstore owner is grumpy. You are given a binary array grumpy where grumpy[i] is 1 if the bookstore owner is grumpy during the ith minute, and is 0 otherwise.

When the bookstore owner is grumpy, the customers of that minute are not satisfied, otherwise, they are satisfied.

The bookstore owner knows a secret technique to keep themselves not grumpy for minutes consecutive minutes, but can only use it once.

print the maximum number of customers that can be satisfied throughout the day. 

Input Format :
An integer n (1 ≤ n ≤ 10^5), representing the number of minutes the bookstore is open.

An integer array customers of length n, where customers[i] (0 ≤ customers[i] ≤ 1000) is the number of customers who enter the store at the start of the ith minute, and all those customers leave after the end of that minute.

A binary array grumpy of length n, where grumpy[i] is 1 if the bookstore owner is grumpy during the ith minute, and 0 otherwise.

An integer minutes (1 ≤ minutes ≤ n), representing the number of consecutive minutes the secret technique can be used.

Output Format :
The program should return an integer, which is the maximum number of customers that can be satisfied throughout the day.

Input :
8
1 0 1 2 1 1 7 5
0 1 0 1 0 1 0 1 

3


Output :
16


Constraints :
n == customers.length == grumpy.length

1 <= minutes <= n <= 2 * 10^4

0 <= customers[i] <= 1000

grumpy[i] is either 0 or 1.*/


#include <iostream>
#include <vector>
using namespace std;

int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {
    int n = customers.size();
    int satisfied = 0;
    int maxSatisfied = 0;
    int currentSatisfied = 0;

    // Calculate the initial satisfied customers without using the secret technique
    for (int i = 0; i < n; i++) {
        if (grumpy[i] == 0) {
            satisfied += customers[i];
        }
    }

    // Calculate the satisfied customers using the secret technique for the first 'minutes' minutes
    for (int i = 0; i < minutes; i++) {
        if (grumpy[i] == 1) {
            currentSatisfied += customers[i];
        }
    }

    maxSatisfied = currentSatisfied;

    // Slide the window to find the maximum satisfied customers
    for (int i = minutes; i < n; i++) {
        if (grumpy[i] == 1) {
            currentSatisfied += customers[i];
        }
        if (grumpy[i - minutes] == 1) {
            currentSatisfied -= customers[i - minutes];
        }
        maxSatisfied = max(maxSatisfied, currentSatisfied);
    }

    return satisfied + maxSatisfied;
}

int main() {
    int n;
    cin >> n;

    vector<int> customers(n);
    vector<int> grumpy(n);
    int minutes;

    for (int i = 0; i < n; i++) {
        cin >> customers[i];
    }

    for (int i = 0; i < n; i++) {
        cin >> grumpy[i];
    }

    cin >> minutes;

    int result = maxSatisfied(customers, grumpy, minutes);
    cout << result << endl;

    return 0;
}
